# -*- coding: utf-8 -*-
################################################################################
# University of Zurich - Institute of Computational Linguistics
# Morphology anlysis for Romansh: Adverbs
# Author: Rolf Badat
# Modifications: Reto Baumgartner
# Date: June 2013
################################################################################


################################################################################
#                                                                              #
# 1. Bildung der Adverbien aus Adjektiven:                                     #
#    Hier werden die Adjektive mit Partizipendungen nicht berücksichtigt, da   #
#    diese nicht als Adverbien auftreten können.                               #
#                                                                              #
################################################################################



# 1.0 Einige Vorbereitungen
################################################################################

# Alphabet
define AdvVokal [a|e|i|o|u|y|à|è|ì|ò|ù|é|ó];
define AdvKonsonant  [b|c|d|f|g|h|j|k|l|m|n|p|q|r|s|t|v|w|x|z];
define Letter [AdvVokal|AdvKonsonant];

define AdvADeletionRule [a -> 0 || AdvVokal AdvKonsonant Letter* [{al}|{ar}|{il}] _ ];

#define AdjAdvLabels [ ["+Adj" [0|"+Sup"] "^DB" "+Adv"] ] ;
define AdjAdvLabels [ "+Adv" ] ;

define AdjAdvLabelDeleter [ ["+Adj"|"+Adv"|"+Comp"|"+Sup"|"^DB"] -> 0 ] ;

# 1.1.2 Regelmässige Adverbien werden gebildet, indem der Suffix -main an die 
#       weibliche Form des Adjektivs angehängt wird. Endet das Adjektiv auf 
#       betontes -al, -ar oder -il und ist mehrsilbig fällt das 'a' vor -main
#       aus.
#       Die intensivierende Endung -ischem kann auch Adverbien auszeichnen.

define R1 [[. .] -> "@A" {main}   || _ "+Adj" [$["+Adv"] - $["+Sup"]]];
define R2 ["@A" -> 0 || AdvVokal AdvKonsonant Letter* [{al}|{ar}|{il}] _ ];
define R3 ["@A" -> a ];
define R4 [[. .] -> "@H" {ischem} || _ "+Adj" [$["+Sup"]]];
define RegRules [R1 .o. R2 .o. R3 .o. R4];

# 1.1 Bildung der Adverbien aus regelmässigen Adjektiven und solchen mit flüchtigem Vokal
################################################################################
# Formen werden von der Adjektivflexion bereitgestellt.
# Alle regulären femininen Formen im Singular.
################################################################################

define RegularAdjFemSgPos [@"fstbinaries/RegularAdjFemSgPos.fst" ];

define AdvE [RegularAdjFemSgPos .o. AdvADeletionRule].l {main} "+Adv":0 ;


# 1.3 Bildung der Adverbien aus Adjektiven mit Partizipendung
################################################################################

# Einlesen der Wortliste
read text wordlists/adj-part.txt
define PartStems ;

# 1.3.1 Ersetzen der Endung -à/-ì um danach regelmässig weiterzufahren
define PartEnd [{à} -> {ad}, {ì} -> {id} || _ .#.];

define AdvPart [ [PartStems .o. PartEnd].l a {main} "+Adv":0 ];

# 1.4 Bildung der Adverbien aus unveränderlichen Adjektiven
################################################################################


# 1.4.1 Aus den Regeln in Caduff/Caprez (2006) wird nicht ganz klar, ob diese
#       Adjektive bei der Bildung des Adverbs das Suffix -main erhalten. Da
#       es sich ausschliesslich um Farben handelt, wurde auf eine Derivation
#       zu Adverbien verzichtet. Kommen passende Formen auf, kann man hier 
#       deren Behandlung ergänzen.
 

# 1.5 Bildung der Adverbien aus Adjektiven mit unregelmässiger Komp.-/Sup.-
#     Bildung:
#     'bain', 'mal', 'nausch', 'bler', 'pauc'
#     Diese Adverbien werden folgend als Unregelmässige Adverbien aus lexc
#     integriert.
# 1.6 Bildung der Adverbien aus unregelmässigen Adjektiven:
#     'agen', 'mez', 'lartg'
#     Diese unregelmässigen Adverbien werden aus lexc importiert
################################################################################

read lexc  adv/adv-irr.lexc
define AdvIrr ;


# 1.7 Bildung der Adverbien aus Adjektiven, bei denen die männliche Form auch
#     ein Adverb sein kann:
################################################################################
# NOT USED ANYMORE; 
# Sind jetzt entweder in adv-short.txt oder in adv-irr.lexc
#
#read text < wordlists/adv-adj.txt
#define AdvAdjMascStems ;

#define AdvAdjMascLex [ AdvAdjMascStems AdjAdvLabels ] ;


# 1.7.1 Definition

#define AdvAdjMasc [ AdvAdjMascLex .o. AdjAdvLabelDeleter ] ;


################################################################################
#                                                                              #
# 2. Kurzadverbien:                                                            #
#    Hier wird ein Automat programmiert, der verschiedene Kurzadverbien gemäss #
#    den Regeln 272, 278, 280-284 und 288-290 von Caduff/Caprez (2006)         #
#    verarbeitet. Hier wird nur das Label "+Adv" verwendet, da diese Wörter    #
#    weder von Adjektiven abgeleitet, noch einen Komparativ oder einen         #
#    Superlativ haben.                                                         #
#                                                                              #
################################################################################


# 2. Einlesen der Kurzadverbien über Liste und den Tag anhängen
################################################################################


read text < wordlists/adv-short.txt
define AdvShortStems ;

define AdvShort [ AdvShortStems "+Adv":0 ] ;

# 2b. Einlesen der Negationspartikel
###############################################################################

define PrtNegStems [ {na}]|{betg}|{nun}];
define PrtNegApoStems [ {n'}];

define PrtNeg [ PrtNegStems ["+Prt" "+Neg"]:0 
			  | PrtNegStems ["+Prt" "+Neg" "+Apo"]:0 ] ;



################################################################################
#                                                                              #
# 3.  Alle Teiltransduktoren im Transduktor "Adverbs" vereinen                 #
#                                                                              #
################################################################################

define Adverb [ PrtNeg | AdvShort | [ AdvIrr .P. [ AdvE | AdvPart] ] ];

read regex Adverb ;
save stack fstbinaries/Adverb.fst
